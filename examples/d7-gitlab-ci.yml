image: sparkfabrik/spark-k8s-deployer:latest

services:
  - docker:dind

stages:
  - build
  - test
  - deploy
  - cleanup

before_script:
  - docker login -u oauth2accesstoken -p "$(gcloud auth print-access-token)" https://gcr.io

variables:
  DOCKER_DRIVER: overlay
  DOCKER_HOST: tcp://localhost:2375
  KUBE_DOMAIN: ci.sparkfabrik.cloud
  DEPLOY_CONF_DIR: conf/docker/k8s
  SPARK_PRJ_VENDOR: YOUR_VENDOR
  CI_REGISTRY_IMAGE_DB: gcr.io/spark-int-cloud-services/YOUR_VENDOR-db
  CI_REGISTRY_IMAGE_CODE: gcr.io/spark-int-cloud-services/YOUR_VENDOR-code
  CI_ENVIRONMENT_URL: https://${CI_BUILD_REF_SLUG}.${SPARK_PRJ_VENDOR}.${KUBE_DOMAIN}

build:
  stage: build
  script:
     - docker build --pull -t "$CI_REGISTRY_IMAGE_CODE:$CI_BUILD_REF_SLUG" .
     - gcloud docker -- push "$CI_REGISTRY_IMAGE_CODE:$CI_BUILD_REF_SLUG"

test:
  stage: test
  script:
    - make COMPOSE_FILE_TYPE=ci all dump-database destroy
    - docker build -t "$CI_REGISTRY_IMAGE_DB:$CI_BUILD_REF_SLUG" -f config/docker/images/mariadb/Dockerfile .
    - gcloud docker -- push "$CI_REGISTRY_IMAGE_DB:$CI_BUILD_REF_SLUG"

deploy:
  stage: deploy
  script:
    - command /scripts/deploy
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: https://${CI_BUILD_REF_SLUG}.${SPARK_PRJ_VENDOR}.${KUBE_DOMAIN}
    on_stop: delete_deploy
  only:
    - develop
  artifacts:
    paths:
      - k8s/

delete_deploy:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - command destroy
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  when: manual
  only:
    - develop

